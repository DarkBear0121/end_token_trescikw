name: Steam

on: push
  # push:
  #   branches:
  #     - master
  #     - v[0-9]+.[0-9]+.[0-9]+

jobs:
  changed:
    runs-on: ubuntu-latest
    outputs:
      data: ${{ steps.filter.outputs.data }}
      game_code: ${{ steps.filter.outputs.game_code }}
      macos: ${{ steps.filter.outputs.macos }}
      windows: ${{ steps.filter.outputs.windows }}
      linux: ${{ steps.filter.outputs.linux }}
      unit_tests: ${{ steps.filter.outputs.unit_tests }}
      integration_tests: ${{ steps.filter.outputs.integration_tests }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: .github/path-filters.yml
        token: ${{ github.token }}

  build_linux:
    needs: changed
    # if: needs.changed.outputs.linux == 'true'
    runs-on: ubuntu-latest
    env:
      snapshot: latest-container-runtime-depot
      sdk: com.valvesoftware.SteamRuntime.Sdk-amd64,i386-scout-sysroot
      ARTIFACT: endless-sky
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Check steamrt version
      id: steamrt-version
      run: |
        STEAM_VERSION=$(curl -sSf https://repo.steampowered.com/steamrt-images-scout/snapshots/${{ env.snapshot }}/VERSION.txt --output -)
        echo "RT_VERSION=$STEAM_VERSION" >> $GITHUB_ENV
    - name: Restore cached steamrt archive
      id: cache-tarball
      uses: actions/cache@v2
      with:
        path: build/docker/${{ env.sdk }}.tar.gz
        key: ${{ env.RT_VERSION }}-steamrt-sdk
    - name: Download steamrt archive
      if: steps.cache-tarball.outputs.cache-hit != 'true'
      env:
        tarball: ${{ env.sdk }}.tar.gz
      run: |
        mkdir -p build/docker
        curl -sSf https://repo.steampowered.com/steamrt-images-scout/snapshots/${{ env.snapshot }}/${{ env.tarball }} > build/docker/${{ env.tarball }}
    - name: Download steamrt dockerfile
      run: curl -sSf https://repo.steampowered.com/steamrt-images-scout/snapshots/${{ env.snapshot }}/${{ env.sdk }}.Dockerfile > build/docker/Dockerfile
    - name: Build inside container
      run: |
        mkdir -p tests/build
        cd build/docker
        docker build -f Dockerfile -t s_rt .
        cd ${{ github.workspace }}
        docker run --rm \
          --mount type=bind,ro,src=$(pwd)/source,dst=/endless-sky/source \
          --mount type=bind,src=$(pwd)/tests,dst=/endless-sky/tests \
          --mount type=bind,src=$(pwd)/build,dst=/endless-sky/build \
          --mount type=bind,ro,src=$(pwd)/SConstruct,dst=/endless-sky/SConstruct \
          -e SCHROOT_CHROOT_NAME=steamrt_scout_amd64 \
          -w /endless-sky s_rt /bin/bash -c \
          'sudo dpkg --clear-avail \
            && echo "deb http://old-releases.ubuntu.com/ubuntu/ precise main restricted universe multiverse" > /etc/apt/sources.list \
            && echo "deb http://old-releases.ubuntu.com/ubuntu/ precise-updates main restricted universe multiverse" >> /etc/apt/sources.list \
            && echo "deb http://old-releases.ubuntu.com/ubuntu/ precise-security main restricted universe multiverse" >> /etc/apt/sources.list \
            && sudo apt-get update -q \
            && sudo apt-get install -yq --no-install-recommends libmad0-dev \
            && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 101 \
            && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 101 \
            && update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-5 101 \
            && update-alternatives --auto gcc \
            && update-alternatives --auto g++ \
            && update-alternatives --auto cpp-bin \
            && scons -Qj $(nproc) endless-sky test \
            && mv ./endless-sky build/ \
            && ./build/endless-sky -v \
          '
    - name: Prepare binary
      run: mv build/endless-sky .
    - name: Upload GH artifact
      uses: actions/upload-artifact@v2
      with:
        name: binary-${{ runner.os }}-x86-64
        path: ${{ env.ARTIFACT }}

  test_linux:
    needs: build_linux
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Download GH artifact
      uses: actions/download-artifact@v2
      with:
        name: binary-${{ runner.os }}-x86-64
        path: .
    - run: chmod +x endless-sky
    - name: Prepare Steam runtime
      run: echo "Download / restore cached scout runtime platform container"
    - run: echo "run.sh ./endless-sky -v"

  deploy_linux:
    needs: test_linux
    runs-on: ubuntu-latest
    env:
      dir: steam-linux64-depot
      ARTIFACT: endless-sky
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: binary-${{ runner.os }}-x86-64
        path: .
    - run: chmod +x ${{ env.ARTIFACT }}
    - name: Prepare binary upload
      run: echo "TODO"
    # - uses: game-ci/steam-deploy@v0.1
    #   with:
    #     appId: 404410
    #     buildDescription: canary-${{ github.ref }}
    #     username: ${{ secrets.STEAM_DEPLOY_UN }}
    #     password: ${{ secrets.STEAM_DEPLOY_PW }}
    #     mfaCode: ${{ secrets.STEAM_DEPLOY_MFA }}
    #     rootPath: ''
    #     depot7Path: ${{ env.dir }}
    #     releaseBranch: canary

  deploy_data_depot:
    needs: changed
    if: needs.changed.outputs.data == 'true'
    runs-on: ubuntu-latest
    env:
      dir: steam-data-depot
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: 'Prepare data upload'
      run: |
        mkdir ${{ env.dir }}
        mv -t ${{ env.dir }} \
          changelog \
          copyright \
          credits.txt \
          icon.png \
          keys.txt \
          license.txt \
          data/ \
          images/ \
          sounds/
    - name: Verify move
      run: head -n 13 ${{ env.dir }}/credits.txt
    # TODO: eventually enable below step
    # - uses: game-ci/steam-deploy@v0.1
    #   with:
    #     appId: 404410
    #     buildDescription: canary-${{ github.ref }}
    #     username: ${{ secrets.STEAM_DEPLOY_UN }}
    #     password: ${{ secrets.STEAM_DEPLOY_PW }}
    #     mfaCode: ${{ secrets.STEAM_DEPLOY_MFA }}
    #     rootPath: ''
    #     depot1Path: ${{ env.dir }}
    #     releaseBranch: canary
